	<#@ template debug="false" hostspecific="false" language="C#"                      #>
<#@ output extension=".generated.cs"                                               #>
<#@ include file="$(ProjectDir)..\LinqToDB.Templates\T4Model.ttinclude"               #>
<#@ include file="$(ProjectDir)..\LinqToDB.Templates\NotifyPropertyChanged.ttinclude" #>
<#
	EnableNullableReferenceTypes = true;

	Model.Usings.Add("System.Collections.ObjectModel");
	Model.Usings.Add("System.Windows");

	Model.Namespace.Name = "LinqToDB.LINQPad";

	Model.Types.Add(
		new Class("ConnectionViewModel",
			new NotifyingProperty(ModelType.Create<string>(true),       "Name"),
			new NotifyingProperty(new ModelType("IDatabaseProvider", true, true), "SelectedProvider", "ProviderPathVisibility", "ProviderPathLabel", "ProviderPath"),
			new NotifyingProperty(ModelType.Create<string>(true),       "Provider"),
			new NotifyingProperty(ModelType.Create<string>(true),       "ConnectionString"),
			new NotifyingProperty("int",          "CommandTimeout"),
			new NotifyingProperty("bool",         "Persist"),
			new NotifyingProperty("bool",         "IsProduction"),
			new NotifyingProperty("bool",         "Pluralize"),
			new NotifyingProperty("bool",         "Capitalize"),
			new NotifyingProperty("bool",         "IncludeRoutines"),
			new NotifyingProperty("bool",         "IncludeFKs"),
			new NotifyingProperty("bool",         "EncryptConnectionString"),
			new NotifyingProperty("bool",         "UseCustomFormatter"),
			new NotifyingProperty("bool",         "UseProviderSpecificTypes"),
			new NotifyingProperty("bool",         "OptimizeJoins"),
			new NotifyingProperty(ModelType.Create<string>(true),       "IncludeSchemas"),
			new NotifyingProperty(ModelType.Create<string>(true),       "ExcludeSchemas"),
			new NotifyingProperty(ModelType.Create<string>(true),       "IncludeCatalogs"),
			new NotifyingProperty(ModelType.Create<string>(true),       "ExcludeCatalogs"),
			new NotifyingProperty(ModelType.Create<string>(true),       "CustomAssemblyPath"),
			new NotifyingProperty(ModelType.Create<string>(true),       "CustomTypeName"),
			new NotifyingProperty(ModelType.Create<string>(true),       "AppConfigPath"),
			new NotifyingProperty(ModelType.Create<string>(true),       "CustomConfiguration"),
			new NotifyingProperty("bool",         "IsDynamic", "IsDynamic", "DynamicVisibility", "StaticVisibility"),
			new NotifyingProperty("Visibility",   "DynamicVisibility").InitGetter(() => new [] { "IsDynamic ? Visibility.Visible : Visibility.Collapsed" }),
			new NotifyingProperty("Visibility",   "StaticVisibility").InitGetter(() => new [] { "!IsDynamic ? Visibility.Visible : Visibility.Collapsed" }),
			new NotifyingProperty("Visibility",   "ProviderPathVisibility") { Conditional = "LPX6" }.InitGetter(() => new [] { "if (Provider != null)", "{", "\treturn SelectedProvider?.IsProviderPathSupported(Provider) == true ? Visibility.Visible : Visibility.Collapsed;", "}", "return Visibility.Collapsed;" }),
			new NotifyingProperty("Visibility",   "ProviderPathVisibility") { Conditional = "!LPX6" }.InitGetter(() => new [] { "Visibility.Collapsed" }),
			new NotifyingProperty(ModelType.Create<string>(true),       "ProviderPathLabel").InitGetter(() => new [] { "if (Provider != null)", "{", "\tvar assemblyName = SelectedProvider?.GetProviderAssemblyName(Provider);", "\tif (assemblyName != null)", "\t{", "\t\treturn $\"Specify path to {assemblyName}\";", "\t}", "}", "return null;" }),
			new NotifyingProperty(ModelType.Create<string>(true),       "ProviderPath"),
			new NotifyingProperty("ObservableCollection<IDatabaseProvider>", "Providers"))
			{
				AccessModifier = AccessModifier.Internal
			}
	);

	GenerateModel();
#>
